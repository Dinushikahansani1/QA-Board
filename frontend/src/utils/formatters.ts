/**
 * Type definition for a structured selector object, as generated by the backend parser.
 */
// A more specific type for selector arguments, which can be a string, number, or a simple object.
type SelectorArg = string | number | Record<string, unknown>;

export interface Selector {
  method: string;
  args: SelectorArg[];
  chain: {
    action: string;
    args: SelectorArg[];
  }[];
}

/**
 * Formats a selector into a human-readable string.
 * Handles both simple string selectors and complex structured objects.
 * @param selector The selector to format.
 * @returns A string representation of the selector.
 */
export const formatSelector = (selector: string | Selector): string => {
  if (typeof selector === 'string') {
    return selector;
  }

  if (typeof selector === 'object' && selector !== null) {
    // Format the arguments for the main method
    const formattedArgs = selector.args.map(arg => {
      if (typeof arg === 'string') {
        return `'${arg}'`;
      }
      return JSON.stringify(arg);
    }).join(', ');

    let selectorString = `${selector.method}(${formattedArgs})`;

    // Add any chained method calls
    if (selector.chain && selector.chain.length > 0) {
      for (const chainedCall of selector.chain) {
        const formattedChainArgs = chainedCall.args.map(arg => {
          if (typeof arg === 'string') {
            return `'${arg}'`;
          }
          return JSON.stringify(arg);
        }).join(', ');
        selectorString += `.${chainedCall.action}(${formattedChainArgs})`;
      }
    }

    return selectorString;
  }

  // Fallback for null or other unexpected types
  return '';
};
